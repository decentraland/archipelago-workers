openapi: 3.1.0
info:
  title: Archipelago WebSocket Connector API
  description: |
    ## Overview
    
    The Archipelago WebSocket Connector API provides real-time bidirectional communication for Decentraland clients through WebSocket connections. This service acts as the gateway between client applications and the Archipelago communication system, enabling live position synchronization, chat messaging, profile updates, and island assignment notifications.
    
    ### Purpose
    
    This service manages the connection layer for all peer-to-peer communication in the Archipelago protocol. It is responsible for:
    
    - **Connection Management**: Establishing, maintaining, and terminating WebSocket connections for active users
    - **Authentication**: Verifying user identity through Ethereum signature-based challenge-response authentication
    - **Message Routing**: Delivering real-time updates about island assignments, peer positions, and communication events
    - **Protocol Translation**: Converting between client message formats and the internal Archipelago protocol
    - **Peer Registry**: Maintaining an active registry of connected peers and their current states
    
    ### Key Features
    
    **Authentication** uses a secure challenge-response handshake mechanism based on Ethereum signatures. Clients provide their Ethereum address, receive a cryptographic challenge, sign it, and return the signature via AuthChain for verification. This ensures only legitimate users can establish connections.
    
    **Position Updates** enable real-time synchronization of avatar positions and movements. Clients send position data as users move through the metaverse, and the service distributes this information to nearby peers within the same island, enabling avatar rendering and spatial awareness.
    
    **Profile Events** notify connected peers when users update their avatars, appearance, or other profile information. This ensures all users see consistent and up-to-date representations of other players.
    
    **Chat Messages** facilitate text communication between nearby users. Messages are delivered to all peers within the same island or scene, enabling social interaction and coordination.
    
    **Island Assignments** notify clients when they are moved between islands as they navigate the metaverse. These notifications trigger clients to update their communication channels and peer visibility accordingly.
    
    ### How It Works
    
    The WebSocket Connector service integrates tightly with the Archipelago core service to provide seamless communication:
    
    1. **Connection Lifecycle**: When a client establishes a WebSocket connection, the service authenticates the peer and adds them to the active peer registry
    2. **Island Coordination**: The service receives island assignment updates from the core service whenever a peer's island changes due to movement or clustering recalculation
    3. **Message Broadcasting**: Position updates, chat messages, and profile events are routed to all relevant peers based on their current island assignments
    4. **Connection Monitoring**: The service tracks heartbeat messages to detect disconnected or inactive peers and removes them from the registry
    
    ### Authentication Flow
    
    The authentication process ensures secure peer identification:
    
    1. **Connection Initiation**: Client connects via WebSocket and sends a `challengeRequest` with their Ethereum address
    2. **Challenge Generation**: Server responds with a `challengeResponse` containing a unique challenge string
    3. **Signature Submission**: Client signs the challenge using their Ethereum private key and sends a `signedChallenge` with the AuthChain
    4. **Verification & Welcome**: Server validates the signature, assigns a peer ID, and sends a `welcome` message confirming successful authentication
    
    Once authenticated, the peer can send and receive messages. The connection is kept alive through periodic `heartbeat` messages, and peers can be `kicked` if they establish duplicate sessions or violate protocol rules.
    
    ### Message Types
    
    The WebSocket protocol supports several message types:
    
    - **`challengeRequest`**: Initial connection with Ethereum address
    - **`challengeResponse`**: Server-provided cryptographic challenge
    - **`signedChallenge`**: Client-signed challenge with AuthChain
    - **`welcome`**: Server confirmation with assigned peer ID
    - **`heartbeat`**: Keep-alive messages to maintain connection
    - **`kicked`**: Disconnection notification (e.g., due to new session)
    
    Authenticated peers receive real-time messages for position updates, profile changes, chat messages, and island assignment notifications as they move through Decentraland's metaverse.
    
    ### Use Cases
    
    - **Client Connections**: Enable Decentraland clients to connect and participate in the communication system
    - **Real-time Multiplayer**: Support synchronous interactions between multiple users in shared spaces
    - **Social Features**: Facilitate chat, avatar visibility, and user presence awareness
    - **Scene Integration**: Connect to scene-specific communication channels for coordinated experiences
    - **Network Debugging**: Monitor connection status, message delivery, and peer activity
    
    For detailed information about the WebSocket protocol, message formats, and communication architecture, see [ADR-204](https://adr.decentraland.org/adr/ADR-204).
  version: 1.0.0
  contact:
    name: Decentraland
    url: https://decentraland.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-api-id: archipelago-ws-connector-api
servers:
  - url: https://archipelago-ea-ws-connector.decentraland.org
    description: WebSocket Connector service - Production
  - url: https://archipelago-ea-ws-connector.zone
    description: WebSocket Connector service - Development
security: []
paths:
  /status:
    get:
      tags:
        - WebSocket Connector Service
      summary: Get service status
      description: Returns service status with version, commit hash, current time, and user count
      operationId: getStatus
      security: []
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /metrics:
    get:
      tags:
        - WebSocket Connector Service
      summary: Get Prometheus metrics
      description: Returns Prometheus metrics for monitoring
      operationId: getMetrics
      security: []
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health/live:
    get:
      tags:
        - WebSocket Connector Service
      summary: Liveness probe
      description: Returns 'alive' for liveness checks
      operationId: getLiveness
      security: []
      responses:
        '200':
          description: Service is alive
          content:
            text/plain:
              schema:
                type: string
                example: alive
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ws:
    get:
      tags:
        - WebSocket Connector Service
      summary: WebSocket connection
      description: |
        Establishes a WebSocket connection for real-time communication in the Archipelago system. This endpoint enables peer-to-peer communication, position synchronization, and island management for Decentraland clients.
        
        **Authentication Flow:**
        1. Client initiates connection with an Ethereum address
        2. Server responds with a challenge string to sign
        3. Client sends signed challenge with AuthChain
        4. Server validates signature and assigns peer ID
        
        **Supported Message Types:**
        - `challengeRequest`: Initial connection with address
        - `challengeResponse`: Server-provided challenge
        - `signedChallenge`: Client-provided signed challenge with AuthChain
        - `welcome`: Server confirmation with assigned peer ID
        - `heartbeat`: Keep-alive messages
        - `kicked`: Disconnection notification
        
        Once authenticated, the peer receives real-time updates about island assignments, nearby peers, and position changes as they move through Decentraland's metaverse.
      operationId: connectWebSocket
      security: []
      responses:
        '200':
          description: WebSocket connection established
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: connected
        '101':
          description: Switching protocols to WebSocket
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-websocket:
        description: WebSocket protocol for real-time communication
        protocol: archipelago-websocket
        handshake:
          description: Authentication handshake process
          steps:
            - step: 1
              name: HANDSHAKE_START
              description: Client sends challenge request with Ethereum address
              message:
                type: object
                properties:
                  type:
                    type: string
                    enum: [challengeRequest]
                  address:
                    type: string
                    description: Ethereum address
            - step: 2
              name: HANDSHAKE_CHALLENGE_SENT
              description: Server responds with challenge response
              message:
                type: object
                properties:
                  type:
                    type: string
                    enum: [challengeResponse]
                  challenge:
                    type: string
                    description: Challenge string to sign
            - step: 3
              name: HANDSHAKE_CHALLENGE_SENT
              description: Client sends signed challenge
              message:
                type: object
                properties:
                  type:
                    type: string
                    enum: [signedChallenge]
                  authChain:
                    type: array
                    description: AuthChain with signature
            - step: 4
              name: HANDSHAKE_COMPLETED
              description: Server validates and sends welcome message
              message:
                type: object
                properties:
                  type:
                    type: string
                    enum: [welcome]
                  peerId:
                    type: string
                    description: Assigned peer ID
        messages:
          client:
            challengeRequest:
              type: object
              properties:
                type:
                  type: string
                  enum: [challengeRequest]
                address:
                  type: string
                  description: Ethereum address
            signedChallenge:
              type: object
              properties:
                type:
                  type: string
                  enum: [signedChallenge]
                authChain:
                  type: array
                  description: AuthChain with signature
            heartbeat:
              type: object
              properties:
                type:
                  type: string
                  enum: [heartbeat]
          server:
            challengeResponse:
              type: object
              properties:
                type:
                  type: string
                  enum: [challengeResponse]
                challenge:
                  type: string
                  description: Challenge string to sign
            welcome:
              type: object
              properties:
                type:
                  type: string
                  enum: [welcome]
                peerId:
                  type: string
                  description: Assigned peer ID
            kicked:
              type: object
              properties:
                type:
                  type: string
                  enum: [kicked]
                reason:
                  type: string
                  enum: [KR_NEW_SESSION]
                  description: Kick reason
        authentication:
          type: ethereum-signature
          description: Ethereum signature validation via AuthChain
components:
  schemas:
    Status:
      type: object
      properties:
        version:
          type: string
          description: Service version
        commitHash:
          type: string
          description: Git commit hash
        currentTime:
          type: string
          format: date-time
          description: Current server time
        userCount:
          type: number
          description: Number of connected users
      required:
        - version
        - commitHash
        - currentTime
        - userCount
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code
      required:
        - error
